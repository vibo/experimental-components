/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface NaiveAccordion {
        /**
          * @default false
         */
        "open": boolean;
    }
    interface NaiveAccordionRegion {
        /**
          * @default {}
         */
        "context": any;
    }
    interface NaiveAccordionTrigger {
        /**
          * @default {}
         */
        "context": any;
    }
    interface NaiveFormControl {
    }
    interface NaiveInput {
    }
    interface NaiveLabel {
    }
    interface NaivePanel {
    }
    interface NaivePanelContent {
    }
    interface NaivePanelFooter {
    }
    interface NaivePanelHeader {
    }
}
export interface NaiveAccordionRegionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNaiveAccordionRegionElement;
}
export interface NaiveAccordionTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNaiveAccordionTriggerElement;
}
declare global {
    interface HTMLNaiveAccordionElement extends Components.NaiveAccordion, HTMLStencilElement {
    }
    var HTMLNaiveAccordionElement: {
        prototype: HTMLNaiveAccordionElement;
        new (): HTMLNaiveAccordionElement;
    };
    interface HTMLNaiveAccordionRegionElementEventMap {
        "naive-accordion/register": any;
    }
    interface HTMLNaiveAccordionRegionElement extends Components.NaiveAccordionRegion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNaiveAccordionRegionElementEventMap>(type: K, listener: (this: HTMLNaiveAccordionRegionElement, ev: NaiveAccordionRegionCustomEvent<HTMLNaiveAccordionRegionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNaiveAccordionRegionElementEventMap>(type: K, listener: (this: HTMLNaiveAccordionRegionElement, ev: NaiveAccordionRegionCustomEvent<HTMLNaiveAccordionRegionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNaiveAccordionRegionElement: {
        prototype: HTMLNaiveAccordionRegionElement;
        new (): HTMLNaiveAccordionRegionElement;
    };
    interface HTMLNaiveAccordionTriggerElementEventMap {
        "naive-accordion/register": any;
    }
    interface HTMLNaiveAccordionTriggerElement extends Components.NaiveAccordionTrigger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNaiveAccordionTriggerElementEventMap>(type: K, listener: (this: HTMLNaiveAccordionTriggerElement, ev: NaiveAccordionTriggerCustomEvent<HTMLNaiveAccordionTriggerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNaiveAccordionTriggerElementEventMap>(type: K, listener: (this: HTMLNaiveAccordionTriggerElement, ev: NaiveAccordionTriggerCustomEvent<HTMLNaiveAccordionTriggerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNaiveAccordionTriggerElement: {
        prototype: HTMLNaiveAccordionTriggerElement;
        new (): HTMLNaiveAccordionTriggerElement;
    };
    interface HTMLNaiveFormControlElement extends Components.NaiveFormControl, HTMLStencilElement {
    }
    var HTMLNaiveFormControlElement: {
        prototype: HTMLNaiveFormControlElement;
        new (): HTMLNaiveFormControlElement;
    };
    interface HTMLNaiveInputElement extends Components.NaiveInput, HTMLStencilElement {
    }
    var HTMLNaiveInputElement: {
        prototype: HTMLNaiveInputElement;
        new (): HTMLNaiveInputElement;
    };
    interface HTMLNaiveLabelElement extends Components.NaiveLabel, HTMLStencilElement {
    }
    var HTMLNaiveLabelElement: {
        prototype: HTMLNaiveLabelElement;
        new (): HTMLNaiveLabelElement;
    };
    interface HTMLNaivePanelElement extends Components.NaivePanel, HTMLStencilElement {
    }
    var HTMLNaivePanelElement: {
        prototype: HTMLNaivePanelElement;
        new (): HTMLNaivePanelElement;
    };
    interface HTMLNaivePanelContentElement extends Components.NaivePanelContent, HTMLStencilElement {
    }
    var HTMLNaivePanelContentElement: {
        prototype: HTMLNaivePanelContentElement;
        new (): HTMLNaivePanelContentElement;
    };
    interface HTMLNaivePanelFooterElement extends Components.NaivePanelFooter, HTMLStencilElement {
    }
    var HTMLNaivePanelFooterElement: {
        prototype: HTMLNaivePanelFooterElement;
        new (): HTMLNaivePanelFooterElement;
    };
    interface HTMLNaivePanelHeaderElement extends Components.NaivePanelHeader, HTMLStencilElement {
    }
    var HTMLNaivePanelHeaderElement: {
        prototype: HTMLNaivePanelHeaderElement;
        new (): HTMLNaivePanelHeaderElement;
    };
    interface HTMLElementTagNameMap {
        "naive-accordion": HTMLNaiveAccordionElement;
        "naive-accordion-region": HTMLNaiveAccordionRegionElement;
        "naive-accordion-trigger": HTMLNaiveAccordionTriggerElement;
        "naive-form-control": HTMLNaiveFormControlElement;
        "naive-input": HTMLNaiveInputElement;
        "naive-label": HTMLNaiveLabelElement;
        "naive-panel": HTMLNaivePanelElement;
        "naive-panel-content": HTMLNaivePanelContentElement;
        "naive-panel-footer": HTMLNaivePanelFooterElement;
        "naive-panel-header": HTMLNaivePanelHeaderElement;
    }
}
declare namespace LocalJSX {
    interface NaiveAccordion {
        /**
          * @default false
         */
        "open"?: boolean;
    }
    interface NaiveAccordionRegion {
        /**
          * @default {}
         */
        "context"?: any;
        "onNaive-accordion/register"?: (event: NaiveAccordionRegionCustomEvent<any>) => void;
    }
    interface NaiveAccordionTrigger {
        /**
          * @default {}
         */
        "context"?: any;
        "onNaive-accordion/register"?: (event: NaiveAccordionTriggerCustomEvent<any>) => void;
    }
    interface NaiveFormControl {
    }
    interface NaiveInput {
    }
    interface NaiveLabel {
    }
    interface NaivePanel {
    }
    interface NaivePanelContent {
    }
    interface NaivePanelFooter {
    }
    interface NaivePanelHeader {
    }
    interface IntrinsicElements {
        "naive-accordion": NaiveAccordion;
        "naive-accordion-region": NaiveAccordionRegion;
        "naive-accordion-trigger": NaiveAccordionTrigger;
        "naive-form-control": NaiveFormControl;
        "naive-input": NaiveInput;
        "naive-label": NaiveLabel;
        "naive-panel": NaivePanel;
        "naive-panel-content": NaivePanelContent;
        "naive-panel-footer": NaivePanelFooter;
        "naive-panel-header": NaivePanelHeader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "naive-accordion": LocalJSX.NaiveAccordion & JSXBase.HTMLAttributes<HTMLNaiveAccordionElement>;
            "naive-accordion-region": LocalJSX.NaiveAccordionRegion & JSXBase.HTMLAttributes<HTMLNaiveAccordionRegionElement>;
            "naive-accordion-trigger": LocalJSX.NaiveAccordionTrigger & JSXBase.HTMLAttributes<HTMLNaiveAccordionTriggerElement>;
            "naive-form-control": LocalJSX.NaiveFormControl & JSXBase.HTMLAttributes<HTMLNaiveFormControlElement>;
            "naive-input": LocalJSX.NaiveInput & JSXBase.HTMLAttributes<HTMLNaiveInputElement>;
            "naive-label": LocalJSX.NaiveLabel & JSXBase.HTMLAttributes<HTMLNaiveLabelElement>;
            "naive-panel": LocalJSX.NaivePanel & JSXBase.HTMLAttributes<HTMLNaivePanelElement>;
            "naive-panel-content": LocalJSX.NaivePanelContent & JSXBase.HTMLAttributes<HTMLNaivePanelContentElement>;
            "naive-panel-footer": LocalJSX.NaivePanelFooter & JSXBase.HTMLAttributes<HTMLNaivePanelFooterElement>;
            "naive-panel-header": LocalJSX.NaivePanelHeader & JSXBase.HTMLAttributes<HTMLNaivePanelHeaderElement>;
        }
    }
}
